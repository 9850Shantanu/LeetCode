// OJ: https://leetcode.com/problems/minimize-malware-spread/
// Author: github.com/lzl124631x
// Time: O(N^2)
// Space: O(N)
class UnionFind {
    vector<int> id, size;
public:
    UnionFind(int n) : id(n), size(n, 1) {
        for (int i = 0; i < n; ++i) id[i] = i;
    }
    void connect(int a, int b) {
        int x = find(a), y = find(b);
        if (x == y) return;
        id[x] = y;
        size[y] += size[x];
    }
    int find(int a) {
        return id[a] == a ? a : (id[a] = find(id[a]));
    }
    int getSize(int a) {
        return size[find(a)];
    }
};
class Solution {
public:
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
        int N = graph.size(), ans = initial[0], minInfected = INT_MAX;
        sort(initial.begin(), initial.end());
        UnionFind uf(N);
        for (int i = 0; i < N; ++i) {
            for (int j = i + 1; j < N; ++j) {
                if (graph[i][j]) uf.connect(i, j);
            }
        }
        for (int i = 0; i < initial.size(); ++i) {
            int cnt = 0;
            unordered_set<int> s;
            for (int j = 0; j < initial.size(); ++j) {
                if (j == i) continue;
                int r = uf.find(initial[j]);
                if (s.count(r)) continue;
                s.insert(r);
                cnt += uf.getSize(r);
            }
            if (cnt < minInfected) {
                ans = initial[i];
                minInfected = cnt;
            }
        }
        return ans;
    }
};