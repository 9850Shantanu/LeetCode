// OJ: https://leetcode.com/problems/minimize-malware-spread/
// Author: github.com/lzl124631x
// Time: O(N^2)
// Space: O(N)
class Solution {
    void dfs(vector<vector<int>> &graph, int start, int c, vector<int> &color) {
        color[start] = c;
        for (int i = 0; i < graph.size(); ++i) {
            if (graph[start][i] && !color[i]) dfs(graph, i, c, color);
        }
    }
public:
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
        unordered_set<int> init(initial.begin(), initial.end());
        sort(initial.begin(), initial.end());
        int N = graph.size(), c = 0, ans = initial[0], maxSize = 0;
        vector<int> color(N);
        for (int n : initial) {
            if (color[n]) continue;
            dfs(graph, n, ++c, color);
        }
        for (int i = 1; i <= c; ++i) {
            int cnt = 0, mal = INT_MAX, malCnt = 0;
            for (int j = 0; j < N; ++j) {
                if (color[j] == i) {
                    cnt++;
                    if (init.count(j)) {
                        mal = min(mal, j);
                        ++malCnt;
                    }
                }
            }
            if (malCnt == 1 && cnt > maxSize) {
                maxSize = cnt;
                ans = mal;
            }
        }
        return ans;
    }
};